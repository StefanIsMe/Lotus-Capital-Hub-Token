// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract PolygonWrapperToken is ERC20 {

function transfer(address recipient, uint256 amount) external returns (bool) {
    require(recipient != address(0), "Invalid recipient address");
    require(amount > 0, "Amount must be greater than 0");
    require(amount <= balanceOf(msg.sender), "Insufficient balance");

    _transfer(msg.sender, recipient, amount);

    return true;
}


    // Address of the BNB token on BNB Chain Testnet
    address public bnbTokenAddress = 0xf423c8fafD0Aa3ee911AfBC44f4D8eA713f7C9Dd;

    // Mapping to store the deposited token amounts
    mapping(address => uint256) public depositedTokens;

    // Events
    event Deposit(address indexed depositor, uint256 amount);
    event Withdrawal(address indexed recipient, uint256 amount);

    constructor(
        string memory _name,
        string memory _symbol,
        address _bnbTokenAddress
    ) ERC20(_name, _symbol) {
        bnbTokenAddress = _bnbTokenAddress;
    }

    // Function to deposit tokens from BNB Chain Testnet
    function depositTokens(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");

        // Transfer tokens from the user to this contract
        require(IBNBToken(bnbTokenAddress).transferFrom(msg.sender, address(this), amount), "Token transfer failed");

        // Mint wrapped tokens
        _mint(msg.sender, amount);

        // Update deposited token amount for the user
        depositedTokens[msg.sender] += amount;

        emit Deposit(msg.sender, amount);
    }

    // Function to withdraw tokens to BNB Chain Testnet
    function withdrawTokens(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(depositedTokens[msg.sender] >= amount, "Insufficient deposited tokens");

        // Burn wrapped tokens from the user's balance
        _burn(msg.sender, amount);

        // Update deposited token amount for the user
        depositedTokens[msg.sender] -= amount;

        // Transfer tokens from this contract to the user on BNB Chain Testnet
        require(IBNBToken(bnbTokenAddress).transfer(msg.sender, amount), "Token transfer failed");

        emit Withdrawal(msg.sender, amount);
    }
    
    // Modifier to allow only the bridge contract to call a function
    modifier onlyBridge() {
        require(msg.sender == bridgeContractAddress, "Caller is not the bridge contract");
        _;
    }
}
